#include <cstdlib>
#include <string>

// Must be defined in one file, _before_ #include "clay.h"
#define CLAY_IMPLEMENTATION
#include "clay.h"
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

const int         screenWidth  = 800;
const int         screenHeight = 600;
const Clay_Color  COLOR_LIGHT  = (Clay_Color){224, 215, 210, 255};
const Clay_Color  COLOR_RED    = (Clay_Color){168, 66, 28, 255};
const Clay_Color  COLOR_ORANGE = (Clay_Color){225, 138, 50, 255};
const std::string imagePath    = "E:/Study/CodeProj/PlayGround/Asset/muzimi.jpg";
unsigned char*    image        = nullptr;

// Example measure text function
static inline Clay_Dimensions MeasureText(Clay_String* text, Clay_TextElementConfig* config)
{
    // Clay_TextElementConfig contains members such as fontId, fontSize, letterSpacing etc
    // Note: Clay_String->chars is not guaranteed to be null terminated
}

// Re-useable components are just normal functions
void SidebarItemComponent()
{
    // Layout config is just a struct that can be declared statically, or inline
    static const Clay_LayoutConfig sidebarItemLayout = (Clay_LayoutConfig){
        .sizing = {.width = CLAY_SIZING_GROW(), .height = CLAY_SIZING_FIXED(50)},
    };

    CLAY(CLAY_LAYOUT(sidebarItemLayout), CLAY_RECTANGLE({.color = COLOR_ORANGE})) {}
}

// An example function to begin the "root" of your layout tree
Clay_RenderCommandArray CreateLayout(unsigned char* image)
{
    Clay_BeginLayout();

    // An example of laying out a UI with a fixed width sidebar and flexible width main content
    CLAY(CLAY_ID("OuterContainer"),
         CLAY_LAYOUT({.sizing   = {CLAY_SIZING_GROW(), CLAY_SIZING_GROW()},
                      .padding  = {16, 16},
                      .childGap = 16}),
         CLAY_RECTANGLE({.color = {250, 250, 255, 255}}))
    {
        CLAY(CLAY_ID("SideBar"),
             CLAY_LAYOUT({.layoutDirection = CLAY_TOP_TO_BOTTOM,
                          .sizing = {.width = CLAY_SIZING_FIXED(300), .height = CLAY_SIZING_GROW()},
                          .padding  = {16, 16},
                          .childGap = 16}),
             CLAY_RECTANGLE({.color = COLOR_LIGHT}))
        {
            CLAY(CLAY_ID("ProfilePictureOuter"),
                 CLAY_LAYOUT({.sizing         = {.width = CLAY_SIZING_GROW()},
                              .padding        = {16, 16},
                              .childGap       = 16,
                              .childAlignment = {.y = CLAY_ALIGN_Y_CENTER}}),
                 CLAY_RECTANGLE({.color = COLOR_RED}))
            {
                CLAY(CLAY_ID("ProfilePicture"),
                     CLAY_LAYOUT({.sizing = {.width  = CLAY_SIZING_FIXED(60),
                                             .height = CLAY_SIZING_FIXED(60)}}),
                     CLAY_IMAGE({.imageData = image, {.height = 60, .width = 60}}))
                {
                }
                CLAY_TEXT(CLAY_STRING("Clay - UI Library"),
                          CLAY_TEXT_CONFIG({.fontSize = 24, .textColor = {255, 255, 255, 255}}));
            }

            // Standard C code like loops etc work inside components
            for (int i = 0; i < 5; i++)
            {
                SidebarItemComponent();
            }
        }

        CLAY(CLAY_ID("MainContent"),
             CLAY_LAYOUT({.sizing = {.width = CLAY_SIZING_GROW(), .height = CLAY_SIZING_GROW()}}),
             CLAY_RECTANGLE({.color = COLOR_LIGHT}))
        {
        }
    }
    // ...
}

int main(int argc, char** argv)
{
    // Note: malloc is only used here as an example, any allocator that provides
    // a pointer to addressable memory of at least totalMemorySize will work
    uint64_t   totalMemorySize = Clay_MinMemorySize();
    Clay_Arena arena =
        Clay_CreateArenaWithCapacityAndMemory(totalMemorySize, malloc(totalMemorySize));
    Clay_Initialize(arena, (Clay_Dimensions){screenWidth, screenHeight});

    // Tell clay how to measure text
    Clay_SetMeasureTextFunction(MeasureText);

    /*
    // Update internal layout dimensions
    Clay_SetLayoutDimensions((Clay_Dimensions){screenWidth, screenHeight});

    // Update internal pointer position for handling mouseover / click / touch events
    Clay_SetPointerState((Clay_Vector2){400, 300}, true);
    */

    int width;
    int height;
    int channel;
    image = stbi_load(imagePath.c_str(), &width, &height, &channel, 0);

    CreateLayout(image);
    Clay_RenderCommandArray renderCommands = Clay_EndLayout();

    stbi_image_free(image);
    image = nullptr;

    return EXIT_SUCCESS;
}
